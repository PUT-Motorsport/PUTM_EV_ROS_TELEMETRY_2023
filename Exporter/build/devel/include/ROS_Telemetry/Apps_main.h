// Generated by gencpp from file ROS_Telemetry/Apps_main.msg
// DO NOT EDIT!


#ifndef ROS_TELEMETRY_MESSAGE_APPS_MAIN_H
#define ROS_TELEMETRY_MESSAGE_APPS_MAIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ROS_Telemetry
{
template <class ContainerAllocator>
struct Apps_main_
{
  typedef Apps_main_<ContainerAllocator> Type;

  Apps_main_()
    : pedal_position(0)
    , counter(0)
    , position_diff(0)
    , device_state(0)  {
    }
  Apps_main_(const ContainerAllocator& _alloc)
    : pedal_position(0)
    , counter(0)
    , position_diff(0)
    , device_state(0)  {
  (void)_alloc;
    }



   typedef uint16_t _pedal_position_type;
  _pedal_position_type pedal_position;

   typedef uint8_t _counter_type;
  _counter_type counter;

   typedef int8_t _position_diff_type;
  _position_diff_type position_diff;

   typedef uint8_t _device_state_type;
  _device_state_type device_state;





  typedef boost::shared_ptr< ::ROS_Telemetry::Apps_main_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROS_Telemetry::Apps_main_<ContainerAllocator> const> ConstPtr;

}; // struct Apps_main_

typedef ::ROS_Telemetry::Apps_main_<std::allocator<void> > Apps_main;

typedef boost::shared_ptr< ::ROS_Telemetry::Apps_main > Apps_mainPtr;
typedef boost::shared_ptr< ::ROS_Telemetry::Apps_main const> Apps_mainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ROS_Telemetry::Apps_main_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ROS_Telemetry::Apps_main_<ContainerAllocator1> & lhs, const ::ROS_Telemetry::Apps_main_<ContainerAllocator2> & rhs)
{
  return lhs.pedal_position == rhs.pedal_position &&
    lhs.counter == rhs.counter &&
    lhs.position_diff == rhs.position_diff &&
    lhs.device_state == rhs.device_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ROS_Telemetry::Apps_main_<ContainerAllocator1> & lhs, const ::ROS_Telemetry::Apps_main_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ROS_Telemetry

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Telemetry::Apps_main_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Telemetry::Apps_main_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Telemetry::Apps_main_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a5de748b20de5195675b828a1b04fa1";
  }

  static const char* value(const ::ROS_Telemetry::Apps_main_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a5de748b20de519ULL;
  static const uint64_t static_value2 = 0x5675b828a1b04fa1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ROS_Telemetry/Apps_main";
  }

  static const char* value(const ::ROS_Telemetry::Apps_main_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 pedal_position\n"
"uint8 counter\n"
"int8 position_diff\n"
"uint8 device_state\n"
;
  }

  static const char* value(const ::ROS_Telemetry::Apps_main_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pedal_position);
      stream.next(m.counter);
      stream.next(m.position_diff);
      stream.next(m.device_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Apps_main_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROS_Telemetry::Apps_main_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ROS_Telemetry::Apps_main_<ContainerAllocator>& v)
  {
    s << indent << "pedal_position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pedal_position);
    s << indent << "counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.counter);
    s << indent << "position_diff: ";
    Printer<int8_t>::stream(s, indent + "  ", v.position_diff);
    s << indent << "device_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TELEMETRY_MESSAGE_APPS_MAIN_H
